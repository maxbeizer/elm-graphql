-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Github.Object.BranchProtectionRule exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Object as Object
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Github.Object
import Github.Interface
import Github.Union
import Github.Scalar
import Github.InputObject
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)



{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) Github.Object.BranchProtectionRule
selection constructor =
    Object.selection constructor
type alias BranchProtectionRuleConflictsOptionalArguments = { after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }

{-| A list of conflicts matching branches protection rule and other branch protection rules

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
branchProtectionRuleConflicts : (BranchProtectionRuleConflictsOptionalArguments -> BranchProtectionRuleConflictsOptionalArguments) -> SelectionSet decodesTo Github.Object.BranchProtectionRuleConflictConnection -> Field decodesTo Github.Object.BranchProtectionRule
branchProtectionRuleConflicts fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after (Encode.string), Argument.optional "before" filledInOptionals.before (Encode.string), Argument.optional "first" filledInOptionals.first (Encode.int), Argument.optional "last" filledInOptionals.last (Encode.int) ]
                |> List.filterMap identity
    in
      Object.selectionField "branchProtectionRuleConflicts" optionalArgs (object_) (identity)


{-| The actor who created this branch protection rule.
-}
creator : SelectionSet decodesTo Github.Interface.Actor -> Field (Maybe decodesTo) Github.Object.BranchProtectionRule
creator object_ =
      Object.selectionField "creator" [] (object_) (identity >> Decode.nullable)


{-| Identifies the primary key from the database.
-}
databaseId : Field (Maybe Int) Github.Object.BranchProtectionRule
databaseId =
      Object.fieldDecoder "databaseId" [] (Decode.int |> Decode.nullable)


{-| Will new commits pushed to matching branches dismiss pull request review approvals.
-}
dismissesStaleReviews : Field Bool Github.Object.BranchProtectionRule
dismissesStaleReviews =
      Object.fieldDecoder "dismissesStaleReviews" [] (Decode.bool)


id : Field Github.Scalar.Id Github.Object.BranchProtectionRule
id =
      Object.fieldDecoder "id" [] (Object.scalarDecoder |> Decode.map Github.Scalar.Id)


{-| Can admins overwrite branch protection.
-}
isAdminEnforced : Field Bool Github.Object.BranchProtectionRule
isAdminEnforced =
      Object.fieldDecoder "isAdminEnforced" [] (Decode.bool)


type alias MatchingRefsOptionalArguments = { after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }

{-| Repository refs that are protected by this rule

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
matchingRefs : (MatchingRefsOptionalArguments -> MatchingRefsOptionalArguments) -> SelectionSet decodesTo Github.Object.RefConnection -> Field decodesTo Github.Object.BranchProtectionRule
matchingRefs fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after (Encode.string), Argument.optional "before" filledInOptionals.before (Encode.string), Argument.optional "first" filledInOptionals.first (Encode.int), Argument.optional "last" filledInOptionals.last (Encode.int) ]
                |> List.filterMap identity
    in
      Object.selectionField "matchingRefs" optionalArgs (object_) (identity)


{-| Identifies the protection rule pattern.
-}
pattern : Field String Github.Object.BranchProtectionRule
pattern =
      Object.fieldDecoder "pattern" [] (Decode.string)


type alias PushAllowancesOptionalArguments = { after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }

{-| A list push allowances for this branch protection rule.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
pushAllowances : (PushAllowancesOptionalArguments -> PushAllowancesOptionalArguments) -> SelectionSet decodesTo Github.Object.PushAllowanceConnection -> Field decodesTo Github.Object.BranchProtectionRule
pushAllowances fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after (Encode.string), Argument.optional "before" filledInOptionals.before (Encode.string), Argument.optional "first" filledInOptionals.first (Encode.int), Argument.optional "last" filledInOptionals.last (Encode.int) ]
                |> List.filterMap identity
    in
      Object.selectionField "pushAllowances" optionalArgs (object_) (identity)


{-| The repository associated with this branch protection rule.
-}
repository : SelectionSet decodesTo Github.Object.Repository -> Field (Maybe decodesTo) Github.Object.BranchProtectionRule
repository object_ =
      Object.selectionField "repository" [] (object_) (identity >> Decode.nullable)


{-| Number of approving reviews required to update matching branches.
-}
requiredApprovingReviewCount : Field (Maybe Int) Github.Object.BranchProtectionRule
requiredApprovingReviewCount =
      Object.fieldDecoder "requiredApprovingReviewCount" [] (Decode.int |> Decode.nullable)


{-| List of required status check contexts that must pass for commits to be accepted to matching branches.
-}
requiredStatusCheckContexts : Field (Maybe (List (Maybe String))) Github.Object.BranchProtectionRule
requiredStatusCheckContexts =
      Object.fieldDecoder "requiredStatusCheckContexts" [] (Decode.string |> Decode.nullable |> Decode.list |> Decode.nullable)


{-| Are approving reviews required to update matching branches.
-}
requiresApprovingReviews : Field Bool Github.Object.BranchProtectionRule
requiresApprovingReviews =
      Object.fieldDecoder "requiresApprovingReviews" [] (Decode.bool)


{-| Are commits required to be signed.
-}
requiresCommitSignatures : Field Bool Github.Object.BranchProtectionRule
requiresCommitSignatures =
      Object.fieldDecoder "requiresCommitSignatures" [] (Decode.bool)


{-| Are status checks required to update matching branches.
-}
requiresStatusChecks : Field Bool Github.Object.BranchProtectionRule
requiresStatusChecks =
      Object.fieldDecoder "requiresStatusChecks" [] (Decode.bool)


{-| Are branches required to be up to date before merging.
-}
requiresStrictStatusChecks : Field Bool Github.Object.BranchProtectionRule
requiresStrictStatusChecks =
      Object.fieldDecoder "requiresStrictStatusChecks" [] (Decode.bool)


{-| Is pushing to matching branches restricted.
-}
restrictsPushes : Field Bool Github.Object.BranchProtectionRule
restrictsPushes =
      Object.fieldDecoder "restrictsPushes" [] (Decode.bool)


{-| Is dismissal of pull request reviews restricted.
-}
restrictsReviewDismissals : Field Bool Github.Object.BranchProtectionRule
restrictsReviewDismissals =
      Object.fieldDecoder "restrictsReviewDismissals" [] (Decode.bool)


type alias ReviewDismissalAllowancesOptionalArguments = { after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }

{-| A list review dismissal allowances for this branch protection rule.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
reviewDismissalAllowances : (ReviewDismissalAllowancesOptionalArguments -> ReviewDismissalAllowancesOptionalArguments) -> SelectionSet decodesTo Github.Object.ReviewDismissalAllowanceConnection -> Field decodesTo Github.Object.BranchProtectionRule
reviewDismissalAllowances fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after (Encode.string), Argument.optional "before" filledInOptionals.before (Encode.string), Argument.optional "first" filledInOptionals.first (Encode.int), Argument.optional "last" filledInOptionals.last (Encode.int) ]
                |> List.filterMap identity
    in
      Object.selectionField "reviewDismissalAllowances" optionalArgs (object_) (identity)
