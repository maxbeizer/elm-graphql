-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Github.Object.GitActor exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Object as Object
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Github.Object
import Github.Interface
import Github.Union
import Github.Scalar
import Github.InputObject
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)



{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) Github.Object.GitActor
selection constructor =
    Object.selection constructor
type alias AvatarUrlOptionalArguments = { size : OptionalArgument Int }

{-| A URL pointing to the author's public avatar.

  - size - The size of the resulting square image.

-}
avatarUrl : (AvatarUrlOptionalArguments -> AvatarUrlOptionalArguments) -> Field Github.Scalar.Uri Github.Object.GitActor
avatarUrl fillInOptionals =
    let
        filledInOptionals =
            fillInOptionals { size = Absent }

        optionalArgs =
            [ Argument.optional "size" filledInOptionals.size (Encode.int) ]
                |> List.filterMap identity
    in
      Object.fieldDecoder "avatarUrl" optionalArgs (Object.scalarDecoder |> Decode.map Github.Scalar.Uri)


{-| The timestamp of the Git action (authoring or committing).
-}
date : Field (Maybe Github.Scalar.GitTimestamp) Github.Object.GitActor
date =
      Object.fieldDecoder "date" [] (Object.scalarDecoder |> Decode.map Github.Scalar.GitTimestamp |> Decode.nullable)


{-| The email in the Git commit.
-}
email : Field (Maybe String) Github.Object.GitActor
email =
      Object.fieldDecoder "email" [] (Decode.string |> Decode.nullable)


{-| The name in the Git commit.
-}
name : Field (Maybe String) Github.Object.GitActor
name =
      Object.fieldDecoder "name" [] (Decode.string |> Decode.nullable)


{-| The GitHub user corresponding to the email field. Null if no such user exists.
-}
user : SelectionSet decodesTo Github.Object.User -> Field (Maybe decodesTo) Github.Object.GitActor
user object_ =
      Object.selectionField "user" [] (object_) (identity >> Decode.nullable)
