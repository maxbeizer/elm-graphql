-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Github.Object.SmimeSignature exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Object as Object
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Github.Object
import Github.Interface
import Github.Union
import Github.Scalar
import Github.InputObject
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)
import Github.Enum.GitSignatureState


{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) Github.Object.SmimeSignature
selection constructor =
    Object.selection constructor
{-| Email used to sign this object.
-}
email : Field String Github.Object.SmimeSignature
email =
      Object.fieldDecoder "email" [] (Decode.string)


{-| True if the signature is valid and verified by GitHub.
-}
isValid : Field Bool Github.Object.SmimeSignature
isValid =
      Object.fieldDecoder "isValid" [] (Decode.bool)


{-| Payload for GPG signing object. Raw ODB object without the signature header.
-}
payload : Field String Github.Object.SmimeSignature
payload =
      Object.fieldDecoder "payload" [] (Decode.string)


{-| ASCII-armored signature header from object.
-}
signature : Field String Github.Object.SmimeSignature
signature =
      Object.fieldDecoder "signature" [] (Decode.string)


{-| GitHub user corresponding to the email signing this commit.
-}
signer : SelectionSet decodesTo Github.Object.User -> Field (Maybe decodesTo) Github.Object.SmimeSignature
signer object_ =
      Object.selectionField "signer" [] (object_) (identity >> Decode.nullable)


{-| The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
-}
state : Field Github.Enum.GitSignatureState.GitSignatureState Github.Object.SmimeSignature
state =
      Object.fieldDecoder "state" [] (Github.Enum.GitSignatureState.decoder)


{-| True if the signature was made with GitHub's signing key.
-}
wasSignedByGitHub : Field Bool Github.Object.SmimeSignature
wasSignedByGitHub =
      Object.fieldDecoder "wasSignedByGitHub" [] (Decode.bool)
