-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Github.Object.App exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Object as Object
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Github.Object
import Github.Interface
import Github.Union
import Github.Scalar
import Github.InputObject
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)



{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) Github.Object.App
selection constructor =
    Object.selection constructor
{-| Identifies the date and time when the object was created.
-}
createdAt : Field Github.Scalar.DateTime Github.Object.App
createdAt =
      Object.fieldDecoder "createdAt" [] (Object.scalarDecoder |> Decode.map Github.Scalar.DateTime)


{-| Identifies the primary key from the database.
-}
databaseId : Field (Maybe Int) Github.Object.App
databaseId =
      Object.fieldDecoder "databaseId" [] (Decode.int |> Decode.nullable)


{-| The description of the app.
-}
description : Field (Maybe String) Github.Object.App
description =
      Object.fieldDecoder "description" [] (Decode.string |> Decode.nullable)


id : Field Github.Scalar.Id Github.Object.App
id =
      Object.fieldDecoder "id" [] (Object.scalarDecoder |> Decode.map Github.Scalar.Id)


{-| The hex color code, without the leading '#', for the logo background.
-}
logoBackgroundColor : Field String Github.Object.App
logoBackgroundColor =
      Object.fieldDecoder "logoBackgroundColor" [] (Decode.string)


type alias LogoUrlOptionalArguments = { size : OptionalArgument Int }

{-| A URL pointing to the app's logo.

  - size - The size of the resulting image.

-}
logoUrl : (LogoUrlOptionalArguments -> LogoUrlOptionalArguments) -> Field Github.Scalar.Uri Github.Object.App
logoUrl fillInOptionals =
    let
        filledInOptionals =
            fillInOptionals { size = Absent }

        optionalArgs =
            [ Argument.optional "size" filledInOptionals.size (Encode.int) ]
                |> List.filterMap identity
    in
      Object.fieldDecoder "logoUrl" optionalArgs (Object.scalarDecoder |> Decode.map Github.Scalar.Uri)


{-| The name of the app.
-}
name : Field String Github.Object.App
name =
      Object.fieldDecoder "name" [] (Decode.string)


{-| A slug based on the name of the app for use in URLs.
-}
slug : Field String Github.Object.App
slug =
      Object.fieldDecoder "slug" [] (Decode.string)


{-| Identifies the date and time when the object was last updated.
-}
updatedAt : Field Github.Scalar.DateTime Github.Object.App
updatedAt =
      Object.fieldDecoder "updatedAt" [] (Object.scalarDecoder |> Decode.map Github.Scalar.DateTime)


{-| The URL to the app's homepage.
-}
url : Field Github.Scalar.Uri Github.Object.App
url =
      Object.fieldDecoder "url" [] (Object.scalarDecoder |> Decode.map Github.Scalar.Uri)
