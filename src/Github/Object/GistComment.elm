-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Github.Object.GistComment exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Object as Object
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Github.Object
import Github.Interface
import Github.Union
import Github.Scalar
import Github.InputObject
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)
import Github.Enum.CommentAuthorAssociation
import Github.Enum.CommentCannotUpdateReason


{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) Github.Object.GistComment
selection constructor =
    Object.selection constructor
{-| The actor who authored the comment.
-}
author : SelectionSet decodesTo Github.Interface.Actor -> Field (Maybe decodesTo) Github.Object.GistComment
author object_ =
      Object.selectionField "author" [] (object_) (identity >> Decode.nullable)


{-| Author's association with the gist.
-}
authorAssociation : Field Github.Enum.CommentAuthorAssociation.CommentAuthorAssociation Github.Object.GistComment
authorAssociation =
      Object.fieldDecoder "authorAssociation" [] (Github.Enum.CommentAuthorAssociation.decoder)


{-| Identifies the comment body.
-}
body : Field String Github.Object.GistComment
body =
      Object.fieldDecoder "body" [] (Decode.string)


{-| The comment body rendered to HTML.
-}
bodyHTML : Field Github.Scalar.Html Github.Object.GistComment
bodyHTML =
      Object.fieldDecoder "bodyHTML" [] (Object.scalarDecoder |> Decode.map Github.Scalar.Html)


{-| The body rendered to text.
-}
bodyText : Field String Github.Object.GistComment
bodyText =
      Object.fieldDecoder "bodyText" [] (Decode.string)


{-| Identifies the date and time when the object was created.
-}
createdAt : Field Github.Scalar.DateTime Github.Object.GistComment
createdAt =
      Object.fieldDecoder "createdAt" [] (Object.scalarDecoder |> Decode.map Github.Scalar.DateTime)


{-| Check if this comment was created via an email reply.
-}
createdViaEmail : Field Bool Github.Object.GistComment
createdViaEmail =
      Object.fieldDecoder "createdViaEmail" [] (Decode.bool)


{-| Identifies the primary key from the database.
-}
databaseId : Field (Maybe Int) Github.Object.GistComment
databaseId =
      Object.fieldDecoder "databaseId" [] (Decode.int |> Decode.nullable)


{-| The actor who edited the comment.
-}
editor : SelectionSet decodesTo Github.Interface.Actor -> Field (Maybe decodesTo) Github.Object.GistComment
editor object_ =
      Object.selectionField "editor" [] (object_) (identity >> Decode.nullable)


{-| The associated gist.
-}
gist : SelectionSet decodesTo Github.Object.Gist -> Field decodesTo Github.Object.GistComment
gist object_ =
      Object.selectionField "gist" [] (object_) (identity)


id : Field Github.Scalar.Id Github.Object.GistComment
id =
      Object.fieldDecoder "id" [] (Object.scalarDecoder |> Decode.map Github.Scalar.Id)


{-| Check if this comment was edited and includes an edit with the creation data
-}
includesCreatedEdit : Field Bool Github.Object.GistComment
includesCreatedEdit =
      Object.fieldDecoder "includesCreatedEdit" [] (Decode.bool)


{-| Returns whether or not a comment has been minimized.
-}
isMinimized : Field Bool Github.Object.GistComment
isMinimized =
      Object.fieldDecoder "isMinimized" [] (Decode.bool)


{-| The moment the editor made the last edit
-}
lastEditedAt : Field (Maybe Github.Scalar.DateTime) Github.Object.GistComment
lastEditedAt =
      Object.fieldDecoder "lastEditedAt" [] (Object.scalarDecoder |> Decode.map Github.Scalar.DateTime |> Decode.nullable)


{-| Returns why the comment was minimized.
-}
minimizedReason : Field (Maybe String) Github.Object.GistComment
minimizedReason =
      Object.fieldDecoder "minimizedReason" [] (Decode.string |> Decode.nullable)


{-| Identifies when the comment was published at.
-}
publishedAt : Field (Maybe Github.Scalar.DateTime) Github.Object.GistComment
publishedAt =
      Object.fieldDecoder "publishedAt" [] (Object.scalarDecoder |> Decode.map Github.Scalar.DateTime |> Decode.nullable)


{-| Identifies the date and time when the object was last updated.
-}
updatedAt : Field Github.Scalar.DateTime Github.Object.GistComment
updatedAt =
      Object.fieldDecoder "updatedAt" [] (Object.scalarDecoder |> Decode.map Github.Scalar.DateTime)


type alias UserContentEditsOptionalArguments = { after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }

{-| A list of edits to this content.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
userContentEdits : (UserContentEditsOptionalArguments -> UserContentEditsOptionalArguments) -> SelectionSet decodesTo Github.Object.UserContentEditConnection -> Field (Maybe decodesTo) Github.Object.GistComment
userContentEdits fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after (Encode.string), Argument.optional "before" filledInOptionals.before (Encode.string), Argument.optional "first" filledInOptionals.first (Encode.int), Argument.optional "last" filledInOptionals.last (Encode.int) ]
                |> List.filterMap identity
    in
      Object.selectionField "userContentEdits" optionalArgs (object_) (identity >> Decode.nullable)


{-| Check if the current viewer can delete this object.
-}
viewerCanDelete : Field Bool Github.Object.GistComment
viewerCanDelete =
      Object.fieldDecoder "viewerCanDelete" [] (Decode.bool)


{-| Check if the current viewer can minimize this object.
-}
viewerCanMinimize : Field Bool Github.Object.GistComment
viewerCanMinimize =
      Object.fieldDecoder "viewerCanMinimize" [] (Decode.bool)


{-| Check if the current viewer can update this object.
-}
viewerCanUpdate : Field Bool Github.Object.GistComment
viewerCanUpdate =
      Object.fieldDecoder "viewerCanUpdate" [] (Decode.bool)


{-| Reasons why the current viewer can not update this comment.
-}
viewerCannotUpdateReasons : Field (List Github.Enum.CommentCannotUpdateReason.CommentCannotUpdateReason) Github.Object.GistComment
viewerCannotUpdateReasons =
      Object.fieldDecoder "viewerCannotUpdateReasons" [] (Github.Enum.CommentCannotUpdateReason.decoder |> Decode.list)


{-| Did the viewer author this comment.
-}
viewerDidAuthor : Field Bool Github.Object.GistComment
viewerDidAuthor =
      Object.fieldDecoder "viewerDidAuthor" [] (Decode.bool)
